package org.fedorahosted.flies.webtrans.client;

import java.util.ArrayList;

import net.customware.gwt.dispatch.client.DispatchAsync;
import net.customware.gwt.presenter.client.EventBus;
import net.customware.gwt.presenter.client.place.Place;
import net.customware.gwt.presenter.client.place.PlaceRequest;
import net.customware.gwt.presenter.client.widget.WidgetDisplay;
import net.customware.gwt.presenter.client.widget.WidgetPresenter;

import org.fedorahosted.flies.gwt.model.Person;
import org.fedorahosted.flies.gwt.model.PersonId;
import org.fedorahosted.flies.gwt.rpc.GetTranslatorList;
import org.fedorahosted.flies.gwt.rpc.GetTranslatorListResult;
import org.fedorahosted.flies.webtrans.client.events.EnterWorkspaceEvent;
import org.fedorahosted.flies.webtrans.client.events.EnterWorkspaceEventHandler;
import org.fedorahosted.flies.webtrans.client.events.ExitWorkspaceEvent;
import org.fedorahosted.flies.webtrans.client.events.ExitWorkspaceEventHandler;
import org.fedorahosted.flies.webtrans.client.rpc.CachingDispatchAsync;
import org.fedorahosted.flies.webtrans.client.ui.HasChildTreeNodes;
import org.fedorahosted.flies.webtrans.client.ui.HasFilter;
import org.fedorahosted.flies.webtrans.client.ui.HasNodeMouseOutHandlers;
import org.fedorahosted.flies.webtrans.client.ui.HasNodeMouseOverHandlers;
import org.fedorahosted.flies.webtrans.client.ui.TreeNodeImpl;

import com.allen_sauer.gwt.log.client.Log;
import com.google.gwt.event.dom.client.MouseOutEvent;
import com.google.gwt.event.dom.client.MouseOutHandler;
import com.google.gwt.event.dom.client.MouseOverEvent;
import com.google.gwt.event.dom.client.MouseOverHandler;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.DecoratedPopupPanel;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.inject.Inject;

public class WorkspaceUsersPresenter extends WidgetPresenter<WorkspaceUsersPresenter.Display> {

	private final DispatchAsync dispatcher;
	private final WorkspaceContext workspaceContext;
		
	public interface Display extends WidgetDisplay{
		void updateUserList(ArrayList<Person> userList);
	}
	
	@Inject
	public WorkspaceUsersPresenter(final Display display, final EventBus eventBus,
			CachingDispatchAsync dispatcher,
		   WorkspaceContext workspaceContext) {
		super(display, eventBus);
		this.workspaceContext = workspaceContext;
		this.dispatcher = dispatcher;
		//loadTranslatorList();
	}
	
	
	@Override
	public Place getPlace() {
		return null;
	}

	@Override
	protected void onBind() {
		
		final DecoratedPopupPanel userPopupPanel = new DecoratedPopupPanel(true);
		
		registerHandler(eventBus.addHandler(ExitWorkspaceEvent.getType(), new ExitWorkspaceEventHandler() {
			@Override
			public void onExitWorkspace(ExitWorkspaceEvent event) {
				loadTranslatorList();
			}
		}));
		
		registerHandler(eventBus.addHandler(EnterWorkspaceEvent.getType(), new EnterWorkspaceEventHandler() {
			@Override
			public void onEnterWorkspace(EnterWorkspaceEvent event) {
				loadTranslatorList();
			}
		}));

		// We won't receive the EnterWorkspaceEvent generated by our own login, because
		// this presenter is not bound until we get the callback from EventProcessor.
		// Thus we load the translator list here.
		loadTranslatorList(); 
	}

	private void loadTranslatorList() {
		dispatcher.execute(new GetTranslatorList(workspaceContext.getProjectContainerId(), workspaceContext.getLocaleId()), new AsyncCallback<GetTranslatorListResult>() {
			@Override
			public void onFailure(Throwable caught) {
				Log.error("error");
			}
			@Override
			public void onSuccess(GetTranslatorListResult result) {
				display.updateUserList(result.getTranslatorList());
				//getDisplay().getFilter().setList(result.getTranslatorList());
			}
	});		
	}


	@Override
	protected void onPlaceRequest(PlaceRequest request) {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onUnbind() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void refreshDisplay() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void revealDisplay() {
		// TODO Auto-generated method stub
		
	}

}
