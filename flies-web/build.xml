<?xml version="1.0"?>
<project name="flies" default="app-deploy" basedir=".">

	<!--
		Give user a chance to override without editing this file or typing -D
	-->
	<property file="${basedir}/build.properties" />

	<property name="profile" value="dev" />
	<property file="build-${profile}.properties" />

	<!-- set global properties for this build -->
	<property name="project.name" value="flies" />
	<property name="project.war" value="true" />

	<property name="tmp.dir" value="build"/>
	
	<property name="test.project.dir" value="../flies-web-test" />
	<property name="test.src.dir" value="${test.project.dir}/src/test" />
	<property name="test.lib.dir" value="${test.project.dir}/lib" />
	<property name="test.tmp.dir" value="${test.project.dir}/build" />
	<property name="test.output.dir" value="${test.tmp.dir}/test-output" />
    <property name="test.classes.dir"    value="${test.tmp.dir}/testclasses"/>
	<property name="test.bootstrap.dir" value="${test.project.dir}/bootstrap" />
	
	<property name="testng.jar" value="${test.lib.dir}/testng.jar" />
		
	<property name="dist.dir" value="dist" />
	<property name="src.main.dir" value="src/main" />
	<property name="src.hot.dir" value="src/hot" />

	<property name="lib.dir" value="lib" />
	<property name="endorsed.dir" value="${lib.dir}/endorsed" />
	
	<property name="war.dir" value="${tmp.dir}/${project.name}.war" />

	<property name="classes.main.dir" value="${war.dir}/WEB-INF/classes" />
	<property name="classes.hot.dir" value="${war.dir}/WEB-INF/classes" />
	<property name="jboss.domain" value="default" />
	<property name="deploy.dir" value="${jboss.home}/server/${jboss.domain}/deploy" />
	<property name="war.deploy.dir" value="${deploy.dir}/${project.name}.war" />
	<property name="packaged.archive" value="${dist.dir}/${project.name}.war" />

	<property name="javac.debug" value="true" />
	<property name="javac.deprecation" value="false" />
	<property name="debug" value="false" />

	<!--Properties for validating configuration files -->
	<property name="validate.resources.dir" value="${tmp.dir}" />
	<property name="schema.dir" value="${tmp.dir}/schemas" />
	<property name="src.schema.dir" value="${schema.dir}/org/jboss/seam" />
	<property name="schema.version" value="2.1" />

	<property name="deps.version" value="2" />
	<property name="deps.filename" value="build-tools/lib/flies-deps-${deps.version}" />

	<fileset id="lib" dir="${lib.dir}">
		<include name="*.jar" />
	</fileset>

	<fileset id="test.lib" dir="${basedir}/../flies-web-test/lib">
		<include name="*.jar" />
	</fileset>

	<path id="build.classpath">
		<fileset refid="lib" />
		<fileset id="jboss.client" dir="${jboss.home}/client">
			<include name="*.jar" />
		</fileset>
		<fileset id="jboss.default.lib" dir="${jboss.home}/server/default/lib">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="test.build.classpath">
		<path refid="build.classpath"/>
		<pathelement path="${testng.jar}"/>
	</path>
	
	<path id="test.runtime.classpath">
        <!-- THE ORDER IS CRITICALLY IMPORTANT! -->
        <pathelement path="${test.classes.dir}"/>
        <pathelement path="${test.bootstrap.dir}"/>
		<fileset refid="test.lib" />
		<fileset refid="lib"/>
        <fileset dir="${lib.dir}/jbossas">
            <!-- This has the Hibernate we want -->
            <include name="*.jar" />
        </fileset>
	</path>

    <patternset id="meta.files">
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>
        <include name="**/*.sql"/>
        <include name="**/*.drl"/>
        <include name="**/*.MF"/>
        <include name="**/*.dtd"/>
        <include name="**/*.xsd"/>
        <include name="**/*.gif"/>
        <include name="**/*.jpg"/>
        <include name="**/*.jpeg"/>
        <include name="**/*.png"/>
        <include name="**/*.css"/>
        <include name="**/*.swf"/>
        <include name="**/*.xhtml"/>
    </patternset>
	
	<import file="build-tools/build-deps.xml" />

	<target name="-deps-installed">
		<available property="deps.installed" value="true"
			file="${deps.filename}" type="file" />
	</target>

	<target name="download-deps" depends="deps.download-deps,-deps-installed"
		unless="deps.installed">
		<echo message="Downloading library dependencies..." />
		<delete>
			<fileset dir="build-tools/lib" includes="flies-deps-*" />
		</delete>
		<!-- non-Maven dependencies -->
		<get src="http://www.cafeconleche.org/XOM/xom-1.2.1.jar" dest="${lib.dir}/xom.jar"
			verbose="true" usetimestamp="true" />
		
		<!-- Google collections -->
		
		<property name="google-collect.version" value="1.0-rc1"/>
		<property name="google-collect.id" value="google-collect-${google-collect.version}"/>
		<get src="http://google-collections.googlecode.com/files/${google-collect.id}.zip" dest="${lib.dir}/${google-collect.id}.zip"
			verbose="true" usetimestamp="true" />

		<unzip src="${lib.dir}/${google-collect.id}.zip" dest="${lib.dir}" />
		<copy file="${lib.dir}/${google-collect.id}/${google-collect.id}.jar" tofile="${lib.dir}/google-collect.jar" />
		<copy file="${lib.dir}/${google-collect.id}/src-${google-collect.version}.zip" tofile="${lib.dir}/src/google-collect-sources.jar" />
		<delete dir="${lib.dir}/${google-collect.id}" />
		<delete file="${lib.dir}/${google-collect.id}.zip" />
		
		<!-- NB increment deps.version above if you add/update a jar! -->

		<!-- apparently unused: nux.jar     1.6 -->

		<touch file="${deps.filename}" />

	</target>

	<target name="-init" depends="download-deps">
		<mkdir dir="${classes.main.dir}" />
		<mkdir dir="${classes.hot.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="compile.main" depends="-init"
		description="Compile the Java source code" unless="eclipse.running">
		<javac classpathref="build.classpath" destdir="${classes.main.dir}"
			debug="${javac.debug}" deprecation="${javac.deprecation}" nowarn="on">
			<src path="${src.main.dir}" />
		</javac>
	</target>

	<target name="compile.hot" depends="-init"
		description="Compile the Java source code" unless="eclipse.running">
		<javac classpathref="build.classpath" destdir="${classes.hot.dir}"
			debug="${javac.debug}" deprecation="${javac.deprecation}" nowarn="on">
			<classpath path="${classes.main.dir}" />
			<src path="${src.hot.dir}" />
		</javac>
	</target>

	<target name="compile" depends="compile.main,compile.hot"
		description="Compile all sources (excluding tests)" />

	<target name="build" depends="compile"
		description="Build the WAR structure in a staging directory">

		<copy todir="${war.dir}/WEB-INF/classes">
			<fileset dir="${basedir}/resources">
				<include name="seam.properties" />
				<include name="*.drl" />
			</fileset>
			<fileset dir="${src.main.dir}">
				<include name="**/*.component.xml" />
			</fileset>
		</copy>

		<copy tofile="${war.dir}/WEB-INF/classes/META-INF/persistence.xml"
			file="${basedir}/resources/META-INF/persistence-${profile}-war.xml"
			overwrite="true">
		</copy>

		<copy tofile="${war.dir}/WEB-INF/classes/import.sql" file="${basedir}/resources/import-${profile}.sql"
			overwrite="true" />

		<copy tofile="${war.dir}/WEB-INF/classes/META-INF/components.xml" file="${basedir}/resources/META-INF/components-${profile}.xml"
			overwrite="true" />

		<copy todir="${war.dir}">
			<fileset dir="${basedir}/view" />
		</copy>

		<copy todir="${war.dir}/WEB-INF">
			<fileset dir="${basedir}/resources/WEB-INF">
				<include name="*.*" />
				<include name="classes/**/*.*" />
				<exclude name="classes/**/*.class" />
			</fileset>
		</copy>

		<copy todir="${war.dir}/WEB-INF">
			<fileset dir="${basedir}/resources/WEB-INF">
				<include name="lib/*.*" />
				<include name="classes/**/*.class" />
			</fileset>
		</copy>

		<copy todir="${war.dir}/WEB-INF/lib">
			<fileset dir="${lib.dir}">
				<!-- TODO: we could do *.jar here -->
				<includesfile name="deployed-jars.list" />
				<exclude name="jboss-seam-gen.jar" />
				<exclude name="icefaces-ahs.jar" if="icefaces.present" />
			</fileset>
		</copy>

		<copy todir="${war.dir}/WEB-INF/classes">
			<fileset dir="${basedir}/resources">
				<include name="**/*.xcss"/>
			</fileset>
			<!--
				move XCSS into classpath for now loading from web context only works
				in JBoss AS 4
			-->
			<fileset dir="${basedir}/view">
				<include name="**/*.xcss"/>
			</fileset>
		</copy>

		<copy todir="${war.dir}/WEB-INF/classes">
			<fileset dir="${basedir}/resources">
				<include name="*.skin.properties" if="ricfaces.present" />
				<include name="*_theme.properties" />
			</fileset>
		</copy>

		<copy todir="${war.dir}/WEB-INF/classes">
			<fileset dir="${basedir}/resources/i18n">
				<include name="*.properties"/>
			</fileset>
		</copy>
		
		<copy todir="${war.dir}/WEB-INF/classes">
			<fileset dir="${basedir}/resources">
				<include name="*jpdl.xml" />
				<include name="*hibernate.cfg.xml" />
				<include name="jbpm.cfg.xml" />
				<include name="META-INF/orm.xml" />
			</fileset>
		</copy>

	</target>

	<target name="stage" depends="build" />

	<target name="archive" depends="stage" description="Package the WAR archive">
		<jar jarfile="${dist.dir}/${project.name}.war" basedir="${war.dir}" />
	</target>

	<target name="app-datasource">
		<fail unless="jboss.home">jboss.home not set</fail>
		<copy file="${basedir}/resources/${project.name}-${profile}-ds.xml"
			tofile="${deploy.dir}/${project.name}-ds.xml" />
	</target>

	<target name="app-explode" depends="stage,app-datasource" description="Deploy the exploded archive">
		<fail unless="jboss.home">jboss.home not set</fail>

		<mkdir dir="${war.deploy.dir}" />
		<copy todir="${war.deploy.dir}">
			<fileset dir="${war.dir}" />
		</copy>
	</target>

	<target name="app-unexplode" description="Undeploy the exploded archive">
		<delete failonerror="no">
			<fileset dir="${war.deploy.dir}">
				<exclude name="**/*.jar" />
			</fileset>
		</delete>
		<delete file="${deploy.dir}/${project.name}-ds.xml"
			failonerror="no" />
		<delete dir="${war.deploy.dir}" failonerror="no" />
	</target>

	<target name="app-reexplode" depends="app-unexplode,clean,app-explode"
		description="Undeploy the exploded archive, clean, then deploy the exploded archive" />

	<target name="app-check-deployed"
		description="Check to see if packaged archive is currently deployed">
		<fail unless="jboss.home">jboss.home not set</fail>
		<condition property="archive.deployed" value="true">
			<available file="${war.deploy.dir}" type="file" />
		</condition>
	</target>

	<target name="app-restart-exploded" unless="archive.deployed"
		description="Deploy exploded archive if not deployed as packaged archive">
		<antcall target="app-explode" />
		<touch file="${war.deploy.dir}/WEB-INF/web.xml" />
	</target>

	<target name="app-restart-deployed" if="archive.deployed"
		description="Deploy packaged archive if deployed as packaged archive">
		<antcall target="deploy" />
	</target>

	<target name="app-restart" depends="app-check-deployed,app-restart-exploded,app-restart-deployed"
		description="Restart the exploded archive" />

	<target name="app-deploy" depends="archive,app-datasource" description="Deploy the packaged archive">
		<fail unless="jboss.home">jboss.home not set</fail>
		<copy todir="${deploy.dir}" file="${dist.dir}/${project.name}.war" />
	</target>

	<target name="app-undeploy" description="Undeploy the packaged archive">
		<delete file="${deploy.dir}/${project.name}.war" />
		<delete file="${deploy.dir}/${project.name}-ds.xml" />
	</target>

	<target name="app-redeploy" depends="app-undeploy,clean,app-deploy"
		description="Undeploy the packaged archive, clean, then deploy the packaged archive" />

	<target name="clean" description="Clean out the staging directory">
		<delete dir="${dist.dir}" />
		<delete failonerror="no" includeemptydirs="true">
			<fileset dir="${test.output.dir}">
				<exclude name="**/*.class" if="eclipse.running" />
			</fileset>
		</delete>
		<delete failonerror="no" includeemptydirs="true">
			<fileset dir="${tmp.dir}">
				<exclude name="**/*.class" if="eclipse.running" />
			</fileset>
		</delete>
	</target>

	<target name="tests-clean" description="Clean out the staging directory">
		<delete dir="${test.project.dir}/test-report" />
		<delete failonerror="no" includeemptydirs="true">
			<fileset dir="${test.tmp.dir}">
				<exclude name="**/*.class" if="eclipse.running" />
			</fileset>
		</delete>
	</target>

	<target name="tests-compile" depends="compile" unless="eclipse.running"
		description="Compile the Java source code for the tests">
		
		<mkdir dir="${test.classes.dir}" />
		
		<javac 
				classpathref="test.build.classpath" 
				destdir="${test.classes.dir}"
				debug="${javac.debug}" 
				deprecation="${javac.deprecation}" 
				nowarn="${javac.nowarn}">
			<classpath>
				<path path="${classes.hot.dir}" />
				<path path="${classes.main.dir}" />
			</classpath>
			<src path="${test.src.dir}" />
		</javac>
		
        <!-- ###### Copy resources (XML files, properties, etc.) to classes ###### -->
        <copy todir="${test.classes.dir}">
            <fileset dir="${test.src.dir}">
                <patternset refid="meta.files"/>
                <exclude name="*.tng.xml"/>
            </fileset>
        </copy>
		
	</target>
	
	<target name="tests-build" depends="-init,tests-compile"
		description="Build the tests">
		<copy todir="${test.classes.dir}">
			<fileset dir="${basedir}/resources">
				<exclude name="META-INF/persistence*.xml" />
				<exclude name="META-INF/components*.xml" />
				<exclude name="import*.sql" />
				<exclude name="${project.name}-*-ds.xml" />
				<exclude name="components-*.properties" />
			</fileset>
		</copy>
		<copy tofile="${test.classes.dir}/META-INF/components.xml" file="${basedir}/resources/META-INF/components-test.xml"
			overwrite="true" />
		<copy tofile="${test.classes.dir}/META-INF/persistence.xml" file="${basedir}/resources/META-INF/persistence-test-war.xml"
			overwrite="true" />
		<copy tofile="${test.classes.dir}/import.sql" file="${basedir}/resources/import-test.sql"
			overwrite="true" />
		<copy todir="${test.classes.dir}" flatten="true">
			<fileset dir="${test.src.dir}">
				<include name="**/*.tng.xml" />
			</fileset>
		</copy>
		<copy todir="${test.classes.dir}">
			<fileset dir="${test.src.dir}">
				<include name="**/*.dbunit.xml" />
			</fileset>
		</copy>
		<copy todir="${test.classes.dir}">
			<fileset dir="${classes.hot.dir}"/>
			<fileset dir="${classes.main.dir}"/>
		</copy>
		
		<mkdir dir="${test.classes.dir}/META-INF/testbinaries"/>
		<copy todir="${test.classes.dir}/META-INF/testbinaries" failonerror="no">
			<fileset dir="${test.project.dir}/testbinaries"/>
		</copy>

		<copy tofile="${test.classes.dir}/${project.name}-ds.xml" file="${basedir}/resources/${project.name}-test-ds.xml"
			overwrite="true" />
		
	</target>

	<target name="test" depends="tests-build" description="Run the tests">
		
        <delete  dir="${test.output.dir}"/>
        <mkdir dir="${test.output.dir}"/>
		
		<condition property="incompatible.jdk">
			<and>
				<equals arg1="${ant.java.version}" arg2="1.6" />
				<not>
					<available classname="javax.xml.bind.JAXB" />
				</not>
			</and>
		</condition>
		<fail if="incompatible.jdk">You are using an incompatible JDK 6. Please use Sun
			JDK 6 Update 4 (1.6.0_04) or newer or use Open JDK 6.</fail>
		<taskdef resource="testngtasks" classpath="${testng.jar}" />
		<testng outputdir="${test.output.dir}">
			<jvmarg line="-Djava.endorsed.dirs=${endorsed.dir}" />
			<jvmarg line="-Dsun.lang.ClassLoader.allowArraySyntax=true" />
			<classpath refid="test.runtime.classpath" />
			<xmlfileset dir="${test.classes.dir}" includes="*.tng.xml" />
		</testng>
	</target>

	<target name="javadoc" depends="compile">
		<mkdir dir="${dist.dir}/apidoc" />
		<javadoc classpathref="build.classpath" destdir="${dist.dir}/apidoc"
			use="true" protected="true" version="true"
			windowtitle="${project.name} API Documentation" doctitle="${project.name} API Documentation"
			link="http://java.sun.com/j2se/5.0/docs/api">

			<packageset dir="${src.hot.dir}" defaultexcludes="yes">
				<include name="*/**" />
			</packageset>

			<packageset dir="${src.main.dir}" defaultexcludes="yes">
				<include name="*/**" />
			</packageset>

		</javadoc>
	</target>

	<target name="validate" depends="stage"
		description="Validate the XML configuration files">
		<mkdir dir="${schema.dir}" />
		<unjar src="${lib.dir}/jboss-seam.jar" dest="${schema.dir}">
			<patternset>
				<include name="org/jboss/seam/*.xsd" />
				<include name="org/jboss/seam/*.dtd" />
			</patternset>
		</unjar>
		<ant antfile="build-tools/validate.xml" target="validateConfiguration" />
	</target>

	<target name="app-purge" depends="app-undeploy"
		description="Clean out JBoss AS temporary deployment files">
		<delete dir="${jboss.home}/server/default/tmp/deploy" />
		<mkdir dir="${jboss.home}/server/default/tmp/deploy/" />
		<delete dir="${jboss.home}/server/default/tmp/sessions" />
		<mkdir dir="${jboss.home}/server/default/tmp/sessions" />
		<delete
			dir="${jboss.home}/server/default/work/jboss.web/localhost/${project.name}" />
	</target>

	<import file="${build.dir}/eclipse-deps.xml"/>

	<target name="update-eclipse-classpath" description="Update Eclipse Classpath for this project"
		depends="eclipse-deps.-initialize-ant-task">
		<f:update-eclipse-classpath xmlns:f="urn:fedorahosted:flies:ant:eclipse"
			classPathFile=".classpath">
			<fileset dir="${lib.dir}">
				<include name="*.jar" />
			</fileset>
		</f:update-eclipse-classpath>

		<f:update-eclipse-classpath xmlns:f="urn:fedorahosted:flies:ant:eclipse"
			classPathFile="${test.project.dir}/.classpath" baseDir="../">
			<fileset dir="${test.lib.dir}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${lib.dir}">
				<include name="*.jar" />
			</fileset>
		</f:update-eclipse-classpath>
		
	</target>

	<target name="app-update-deps" depends="download-deps" 
		description="Update JBoss AS dependencies such as Hibernate">
		
		<fail unless="jboss.home">jboss.home not set</fail>
		
		<delete>
			<fileset dir="${jboss.home}/server/${jboss.domain}/lib">
				<include name="hibernate*" />
			</fileset>
		</delete>
		<copy todir="${jboss.home}/server/${jboss.domain}/lib">
			<fileset dir="${jbossas.lib.dir}">
				<include name="hibernate*" />
				<!-- We put this in WEB-INF/lib -->
				<exclude name="hibernate-search*" />
				<!-- We don't need that at runtime -->
				<exclude name="hibernate-tools*" />
				<!-- We also need EHCache there -->
				<include name="ehcache*" />
				<!-- And Mysql -->
				<include name="mysql*" />
			</fileset>
		</copy>
	</target>
	
</project>
